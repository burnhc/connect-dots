{"version":3,"sources":["EdgeList.js","Grid.js","GridSizePicker.js","App.js","index.js"],"names":["EdgeList","checkFormat","input","includes","length","alert","checkCoordinates","x1","y1","x2","y2","maxSize","props","size","Number","isInteger","parsedEdges","edgeListContent","this","value","split","filter","Boolean","hasError","edge","parseFloat","color","push","onDraw","parseInt","output","isNaN","id","style","ref","placeholder","rows","cols","onChange","onClick","console","log","onClear","Component","Grid","redraw","ctx","canvasReference","current","getContext","clearRect","width","height","fillStyle","fillRect","coordinates","getCircleCoordinates","coordinate","drawCircle","state","drawEdges","toggleDrawEdges","edges","setState","edgesToDraw","spacing","maxFit","grid","i","j","radius","Math","min","beginPath","arc","PI","fill","strokeStyle","lineWidth","moveTo","lineTo","stroke","closePath","eraseEdges","React","createRef","GridSizePicker","type","step","max","App","updateGridSize","event","newValue","target","gridSizeInput","gridSize","onEdgeListChange","edgeInput","onDrawClicked","onClearClicked","gridReference","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.a37246ef.chunk.js","sourcesContent":["/*\r\n * Copyright Â©2019 Dan Grossman.  All rights reserved.  Permission is\r\n * hereby granted to students registered for University of Washington\r\n * CSE 331 for use solely during Autumn Quarter 2019 for purposes of\r\n * the course.  No other use, copying, distribution, or modification\r\n * is permitted without prior written consent. Copyrights for\r\n * third-party components of this work must be honored.  Instructors\r\n * interested in reusing these course materials should contact the\r\n * author.\r\n */\r\n\r\n/*\r\n * A Textfield that allows the user to enter the list of edges.\r\n * Also contains the buttons that the user will use to interact with the app.\r\n */\r\n\r\nimport React, {Component} from 'react';\r\n\r\n/**\r\n * Props:\r\n *\r\n * onChange - a listener for when the edge text area has a keyboard event\r\n * value - the value to display in the text area\r\n */\r\nclass EdgeList extends Component {\r\n\r\n    onDraw () {\r\n        let parsedEdges = [];\r\n\r\n        // Parse each edge by newline to an array\r\n        let edgeListContent = this.props.value.split(/\\r?\\n/);\r\n\r\n        // Remove any empty elements (i.e. from extra newlines)\r\n        edgeListContent = edgeListContent.filter(Boolean);\r\n\r\n        let hasError = false;\r\n\r\n        // Parse each of the edge entries by line\r\n        for (let edge of edgeListContent) {\r\n\r\n            // Parse each line by space\r\n            edge = edge.split(' ');\r\n\r\n            hasError = this.checkFormat(edge);\r\n            if (hasError) {\r\n                break;\r\n            }\r\n\r\n            // Parse the coordinates as [x1,y1] [x2,y2]\r\n            edge[0] = edge[0].split(',');\r\n            edge[1] = edge[1].split(',');\r\n\r\n            // Parse all edge properties individually. If the user\r\n            // enters decimals, parseFloat will be able to catch\r\n            // that rather than using parseInt, which will just\r\n            // end up rounding the coordinates to integers.\r\n            let x1 = parseFloat(edge[0][0]);\r\n            let y1 = parseFloat(edge[0][1]);\r\n            let x2 = parseFloat(edge[1][0]);\r\n            let y2 = parseFloat(edge[1][1]);\r\n            let color = edge[2];\r\n            \r\n            hasError = this.checkCoordinates(x1, y1, x2, y2);\r\n            if (hasError) {\r\n                break;\r\n            }\r\n            parsedEdges.push([x1, y1, x2, y2, color]);\r\n        }\r\n\r\n        if (!hasError) {\r\n            this.props.onDraw(parsedEdges);\r\n        }\r\n    }\r\n\r\n    // Verifies proper format.\r\n    checkFormat = (input) => {\r\n        if ((input.includes(null)) || (input.length !== 3)) {\r\n            alert(\"Edges must be entered in the form: x1,y1 x2,y2 color\");\r\n\r\n            return true;\r\n        }\r\n    };\r\n\r\n    // Verifies coordinate values are non-negative integers\r\n    // within [0, gridSize - 1].\r\n    checkCoordinates = (x1, y1, x2, y2) => {\r\n        let maxSize = this.props.size - 1;\r\n        if ((x1 > maxSize || x1 < 0 || !Number.isInteger(x1)) ||\r\n            (y1 > maxSize || y1 < 0 || !Number.isInteger(y1)) ||\r\n            (x2 > maxSize || x2 < 0 || !Number.isInteger(x2)) ||\r\n            (y2 > maxSize || y2 < 0 || !Number.isInteger(y2))) {\r\n\r\n            alert(\"With a grid size of \" + this.props.size +\r\n                \", all coordinates must be integers from 0 to \"\r\n                + maxSize + \" (inclusive).\");\r\n\r\n            return true;\r\n        }\r\n    };\r\n\r\n    render() {\r\n        let size = parseInt(this.props.size);\r\n        let output = `With a grid size of ${size}, all coordinates\r\n        must be integers from 0 to ${size - 1} (inclusive).`;\r\n        if (isNaN(size) || size === 0 || size === 1) {\r\n            output = \"The grid size must be greater than 1 to draw lines.\";\r\n        }\r\n\r\n        return (\r\n            <div id=\"edge-list\">\r\n                <span id=\"bodyText\">Draw lines between the dots by specifying the line coordinates\r\n                in the box below (upper-left dot is x = 0, y = 0). Separate each\r\n                    individual line with ENTER.</span><br/>\r\n                <p style={{color: '#98959d'}}>{output}</p>\r\n                <textarea\r\n                    ref = 'textarea'\r\n                    placeholder=\"Enter lines here: x1,y1 x2,y2 color\"\r\n                    rows={5}\r\n                    cols={40}\r\n                    onChange={this.props.onChange}\r\n                    value={this.props.value}\r\n                />\r\n                <br/>\r\n\r\n                <button onClick={() => {\r\n\r\n                    // Draws if the size is greater than 1.\r\n                    if (this.props.size > 1) {\r\n                        this.onDraw();\r\n                        console.log('Draw onClick');\r\n                    }\r\n                }}>Draw Lines</button>\r\n\r\n                <button onClick={() => {\r\n                    this.props.onClear();\r\n                    console.log('Clear onClick');\r\n                }}>Clear Lines</button>\r\n\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default EdgeList;\r\n","/*\r\n * Copyright Â©2019 Dan Grossman.  All rights reserved.  Permission is\r\n * hereby granted to students registered for University of Washington\r\n * CSE 331 for use solely during Autumn Quarter 2019 for purposes of\r\n * the course.  No other use, copying, distribution, or modification\r\n * is permitted without prior written consent. Copyrights for\r\n * third-party components of this work must be honored.  Instructors\r\n * interested in reusing these course materials should contact the\r\n * author.\r\n */\r\n\r\n/* A simple grid with a variable size */\r\n\r\nimport React, {Component} from 'react';\r\n\r\n/**\r\n * Props:\r\n *\r\n * width - the desired width of the grid area\r\n * height - the desired height of the grid area\r\n * size - the number of points along a single axis in the grid\r\n * edgeInput - the edge input received from EdgeList to parse and draw\r\n */\r\n\r\n// CONSTANTS: canvas size in pixels, default circle radius\r\nconst CANVAS_SIZE = 500;\r\nconst DEFAULT_RADIUS = 4;\r\n\r\nclass Grid extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            drawEdges: this.props.toggleDrawEdges,\r\n            edgesToDraw: []\r\n        };\r\n\r\n        this.canvasReference = React.createRef();\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.redraw();\r\n    }\r\n\r\n    componentDidUpdate() {\r\n        this.redraw();\r\n    }\r\n\r\n    redraw = () => {\r\n        // Set up the canvas area.\r\n        let ctx = this.canvasReference.current.getContext('2d');\r\n        ctx.clearRect(0, 0, this.props.width, this.props.height);\r\n        ctx.fillStyle = \"#272629\";\r\n        ctx.fillRect(0,0,500,500);\r\n\r\n        // Draw all the dots.\r\n        let coordinates = this.getCircleCoordinates();\r\n        for(let coordinate of coordinates) {\r\n            this.drawCircle(ctx, coordinate);\r\n        }\r\n\r\n        // Trigger 'Draw' button call with boolean.\r\n        if ((this.state.drawEdges !== this.props.toggleDrawEdges)) {\r\n            const edges = this.props.edges;\r\n\r\n            // Toggle button call.\r\n            this.setState({\r\n                drawEdges: !this.state.drawEdges,\r\n                edgesToDraw: edges\r\n            })\r\n        }\r\n\r\n        // Passing the spacing as a parameter allows the edges to\r\n        // be redrawn dynamically as grid size is updated.\r\n        const spacing = CANVAS_SIZE / (this.props.size + 1);\r\n        const maxFit = spacing * this.props.size;\r\n        this.drawEdges(ctx, spacing, maxFit);\r\n    };\r\n\r\n    getCircleCoordinates = () => {\r\n        const size = this.props.size;\r\n        const grid = [];\r\n        const spacing = CANVAS_SIZE / (size + 1);\r\n\r\n        // Increment x\r\n        for (let i = 1; i <= size; i++) {\r\n            // Increment y\r\n            for (let j = 1; j <= size; j++) {\r\n                grid.push([i * spacing, j * spacing]);\r\n            }\r\n        }\r\n        return grid;\r\n    };\r\n\r\n    drawCircle = (ctx, coordinate) => {\r\n        ctx.fillStyle = \"white\";\r\n\r\n        // Generally use a radius of 4, but when there are lots of\r\n        // dots on the grid (> 50) we slowly scale the radius down so\r\n        // they'll all fit next to each other.\r\n        let radius = Math.min(DEFAULT_RADIUS, 100 / this.props.size);\r\n\r\n        ctx.beginPath();\r\n        ctx.arc(coordinate[0], coordinate[1], radius, 0,\r\n            2 * Math.PI);\r\n        ctx.fill();\r\n    };\r\n\r\n    drawEdges = (ctx, spacing, maxFit) => {\r\n        for (let edge of this.state.edgesToDraw) {\r\n            console.log(edge);\r\n\r\n            // Translate dot coordinates to canvas coordinates.\r\n            const x1 = (edge[0] + 1) * spacing;\r\n            const y1 = (edge[1] + 1) * spacing;\r\n            const x2 = (edge[2] + 1) * spacing;\r\n            const y2 = (edge[3] + 1) * spacing;\r\n            const color = edge[4];\r\n\r\n            // Only display edges that would fit on the grid.\r\n            if (x1 <= maxFit && y1 <= maxFit &&\r\n                x2 <= maxFit && y2 <= maxFit) {\r\n\r\n                // Draw the edges.\r\n                ctx.beginPath();\r\n                ctx.strokeStyle = color;\r\n                ctx.lineWidth = 3;\r\n                ctx.moveTo(x1, y1);\r\n                ctx.lineTo(x2, y2);\r\n                ctx.stroke();\r\n                ctx.closePath();\r\n            }\r\n        }\r\n    };\r\n\r\n    // Called from App.js onClearClicked: clears the drawn\r\n    // edges on the canvas.\r\n    eraseEdges = () => {\r\n        this.setState({\r\n            edgesToDraw: []\r\n        })\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <div id=\"grid\">\r\n                <canvas\r\n                    ref={this.canvasReference}\r\n                    width={this.props.width}\r\n                    height={this.props.height}/>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Grid;\r\n","/*\r\n * Copyright Â©2019 Dan Grossman.  All rights reserved.  Permission is\r\n * hereby granted to students registered for University of Washington\r\n * CSE 331 for use solely during Autumn Quarter 2019 for purposes of\r\n * the course.  No other use, copying, distribution, or modification\r\n * is permitted without prior written consent. Copyrights for\r\n * third-party components of this work must be honored.  Instructors\r\n * interested in reusing these course materials should contact the\r\n * author.\r\n */\r\n\r\n/* A simple TextField that only allows numerical input */\r\n\r\nimport React, {Component} from 'react';\r\n\r\n/**\r\n * Props:\r\n *\r\n * onChange - a listener for when the size text area has a keyboard event\r\n * value - the value to display in the text area\r\n */\r\n\r\n// CONSTANT: maximum grid size\r\nconst MAX_SIZE = 200;\r\n\r\nclass GridSizePicker extends Component {\r\n\r\n    render() {\r\n        // Produces message for the user about the grid size.\r\n        let size = parseFloat(this.props.value);\r\n        let output = `The current grid size is ${size} by ${size}.`;\r\n        let color = 'indianred';\r\n\r\n        if (size > MAX_SIZE) {\r\n            output = `Invalid input. The maximum grid size is ${MAX_SIZE}.`;\r\n        } else if (size < 0) {\r\n            output = \"Invalid input. The grid size must be at least 0.\";\r\n        } else if (size === 0 || isNaN(size)) {\r\n            output = \"The grid is currently empty. Increase the grid size!\";\r\n            color = '#98959d';\r\n        } else if (!Number.isInteger(size)) {\r\n            output = \"Invalid input. The grid size must be an integer.\";\r\n        } else {\r\n            color = '#98959d';\r\n        }\r\n\r\n        return (\r\n            <div id=\"grid-size-picker\">\r\n                <label>\r\n                    <span id=\"bodyText\">Set the grid size to</span>\r\n                    <input\r\n                        type=\"number\"\r\n                        step={1}\r\n                        value={this.props.value}\r\n                        onChange={this.props.onChange}\r\n                        min={1}\r\n                        max={MAX_SIZE}\r\n                    />\r\n                    <p style={{color: color}}>{output}</p>\r\n                </label>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default GridSizePicker;\r\n","/*\r\n * Copyright Â©2019 Dan Grossman.  All rights reserved.  Permission is\r\n * hereby granted to students registered for University of Washington\r\n * CSE 331 for use solely during Autumn Quarter 2019 for purposes of\r\n * the course.  No other use, copying, distribution, or modification\r\n * is permitted without prior written consent. Copyrights for\r\n * third-party components of this work must be honored.  Instructors\r\n * interested in reusing these course materials should contact the\r\n * author.\r\n */\r\n\r\nimport React, {Component} from 'react';\r\nimport EdgeList from \"./EdgeList\";\r\nimport Grid from \"./Grid\";\r\nimport GridSizePicker from \"./GridSizePicker\";\r\nimport \"./App.css\";\r\n\r\n// CONSTANTS: default grid size, maximum grid size,\r\n// canvas size in pixels\r\nconst DEFAULT_SIZE = 4;\r\nconst MAX_SIZE = 200;\r\nconst CANVAS_SIZE = 500;\r\n\r\nclass App extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            gridSize: DEFAULT_SIZE, // # dots in the grid (default: 4)\r\n            gridSizeInput: DEFAULT_SIZE,\r\n            edgeInput: \"\",          // Content in EdgeList\r\n            parsedEdges: \"\",        // Edges parsed from EdgeList\r\n            drawEdges: false        // Switched when draw button is triggered\r\n        };\r\n\r\n        // Used for calling Grid component\r\n        this.gridReference = React.createRef();\r\n    }\r\n\r\n    updateGridSize = (event) => {\r\n        const newValue = event.target.value;\r\n\r\n        this.setState({\r\n            gridSizeInput: parseFloat(newValue)\r\n        });\r\n\r\n        // Checks that grid size is within [0,200].\r\n        if ((Number.isInteger(parseFloat(newValue))) &&\r\n            ((newValue) >= 0) && (newValue <= MAX_SIZE)) {\r\n\r\n            this.setState({\r\n                gridSize: parseInt(newValue)\r\n            })\r\n\r\n          // If the input is empty and isNaN the grid becomes empty.\r\n        } else if (isNaN(parseInt(newValue))){\r\n            this.setState({\r\n                gridSize: \"\"\r\n            })\r\n        }\r\n    };\r\n\r\n    onEdgeListChange = (event) => {\r\n        this.setState({\r\n            edgeInput: event.target.value,\r\n        });\r\n    };\r\n\r\n    // When draw is clicked, parse the edges and pass to Grid.\r\n    onDrawClicked = (parsedEdges) => {\r\n        this.setState({\r\n            parsedEdges: parsedEdges,\r\n            drawEdges: !this.state.drawEdges\r\n        });\r\n    };\r\n\r\n    onClearClicked = () => {\r\n        this.setState({\r\n            // Clear parsed edges\r\n            parsedEdges: \"\",\r\n\r\n            // Clear the EdgeList box\r\n            edgeInput: \"\"\r\n        });\r\n\r\n        // Calls Grid.js eraseEdges\r\n        this.gridReference.current.eraseEdges();\r\n\r\n        console.log(this.state.parsedEdges);\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <div id=\"wrapper\">\r\n                <p id=\"app-title\">connect the dots</p>\r\n                <GridSizePicker\r\n                    value={this.state.gridSizeInput}\r\n                    onChange={this.updateGridSize}\r\n                />\r\n\r\n                <Grid\r\n                    ref={this.gridReference}\r\n                    edges={this.state.parsedEdges}\r\n                    toggleDrawEdges={this.state.drawEdges}\r\n                    size={this.state.gridSize}\r\n                    width={CANVAS_SIZE}\r\n                    height={CANVAS_SIZE}\r\n                />\r\n\r\n                <EdgeList\r\n                    value={this.state.edgeInput}\r\n                    size={this.state.gridSize}\r\n                    onChange={this.onEdgeListChange}\r\n                    onDraw={this.onDrawClicked}\r\n                    onClear={this.onClearClicked}\r\n                />\r\n            </div>\r\n        );\r\n    }\r\n\r\n}\r\n\r\nexport default App;","/*\r\n * Copyright Â©2019 Dan Grossman.  All rights reserved.  Permission is\r\n * hereby granted to students registered for University of Washington\r\n * CSE 331 for use solely during Autumn Quarter 2019 for purposes of\r\n * the course.  No other use, copying, distribution, or modification\r\n * is permitted without prior written consent. Copyrights for\r\n * third-party components of this work must be honored.  Instructors\r\n * interested in reusing these course materials should contact the\r\n * author.\r\n */\r\n\r\nimport React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n"],"sourceRoot":""}